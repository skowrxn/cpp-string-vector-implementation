/tmp/tmp7u11x9w4/student/PtrCStringVector.cpp:22:14:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        std::strcpy(data_[i], srcPtrCStringVector.data_[i]);
/tmp/tmp7u11x9w4/student/PtrCStringVector.cpp:59:5:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
    strcpy(data_[size_], text2Add);
/tmp/tmp7u11x9w4/student/PtrCStringVector.cpp:101:14:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        std::strcpy(combined, data_[i]);
/tmp/tmp7u11x9w4/student/PtrCStringVector.cpp:102:14:  [4] (buffer) strcat:Does not check for buffer overflows when concatenating to destination [MS-banned] (CWE-120).  Consider using strcat_s, strncat, strlcat, or snprintf (warning: strncat is easily misused). 
        std::strcat(combined, rhs.data_[i]);
/tmp/tmp7u11x9w4/student/PtrCStringVector.cpp:136:14:  [4] (buffer) strcpy:Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120).  Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused). 
        std::strcpy(newData[i], data_[i]);
/tmp/tmp7u11x9w4/student/PtrCStringVector.cpp:12:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    data_ = new char *[capacity_]();
/tmp/tmp7u11x9w4/student/PtrCStringVector.cpp:18:17:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    data_ = new char *[capacity_]();
/tmp/tmp7u11x9w4/student/PtrCStringVector.cpp:133:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char **newData = new char *[new_capacity]();
/tmp/tmp7u11x9w4/student/PtrCStringVector.cpp:20:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t len = std::strlen(srcPtrCStringVector.data_[i]) + 1;
/tmp/tmp7u11x9w4/student/PtrCStringVector.cpp:57:18:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    size_t len = strlen(text2Add) + 1;
/tmp/tmp7u11x9w4/student/PtrCStringVector.cpp:99:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t len = std::strlen(data_[i]) + std::strlen(rhs.data_[i]) + 1;
/tmp/tmp7u11x9w4/student/PtrCStringVector.cpp:99:51:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        size_t len = std::strlen(data_[i]) + std::strlen(rhs.data_[i]) + 1;
/tmp/tmp7u11x9w4/student/PtrCStringVector.cpp:135:36:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        newData[i] = new char[std::strlen(data_[i]) + 1];
