Consolidate compiler generated dependencies of target gtest
[ 25%] Built target gtest
Consolidate compiler generated dependencies of target gtest_main
[ 50%] Built target gtest_main
Consolidate compiler generated dependencies of target tests
[ 87%] Built target tests
[100%] Running perf stat and explaining results

 Performance counter stats for '/tmp/tmp7u11x9w4/student/build/bin/tests':

     4,756,407,555      cycles                    #    2.663 GHz                      (66.63%)
     9,204,279,421      instructions              #    1.94  insn per cycle           (83.20%)
        14,476,199      cache-references          #    8.105 M/sec                    (83.20%)
         7,366,768      cache-misses              #   50.889 % of all cache refs      (83.43%)
     2,123,136,170      branches                  #    1.189 G/sec                    (83.43%)
         2,186,915      branch-misses             #    0.10% of all branches          (83.32%)
           174,361      faults                    #   97.623 K/sec                  
          1,786.06 msec task-clock                #    1.000 CPUs utilized          
                 5      context-switches          #    2.799 /sec                   
                 0      cpu-migrations            #    0.000 /sec                   
           174,361      page-faults               #   97.623 K/sec                  

       1.786665500 seconds time elapsed

       1.401460000 seconds user
       0.385453000 seconds sys


======================
Program perf to narzędzie do analizy wydajności działania programów.
Podkomenda perf\ stat mierzy podstawowe statystyki wydajności: ile operacji wykonał CPU, jak dobrze działała pamięć cache itd.

Tłumaczenie wyników perf stat:

1. cycles         - liczba cykli CPU zużyta przez program. Jeden cykl to podstawowa jednostka pracy procesora: np. wykonanie małego fragmentu instrukcji.
2. instructions   - liczba wykonanych instrukcji procesora. Instrukcja to pojedyncza operacja typu dodawanie, przesunięcie, skok itd.
3. cache-references - liczba prób odczytu/zapisu danych z szybkiej pamięci cache procesora.
4. cache-misses   - ile razy procesor próbował dostać dane z cache, ale ich tam nie było, przez co musiał pobrać z RAM-u.
5. branches       - liczba instrukcji skoku, np. w if-ach, pętlach for/while lub switch.
6. branch-misses  - liczba sytuacji, kiedy procesor źle przewidział wynik skoku i musiał cofnąć się i poprawić, co spowalnia program.
7. faults         - liczba błędów dostępu do pamięci lub pułapek systemowych. Np. gdy program odwołuje się do pamięci, której jeszcze nie załadowano do RAM-u.
8. task-clock     - łączny czas w milisekundach, jaki procesor aktywnie spędził wykonując program.
9. context-switches - ile razy system operacyjny przełączył wykonanie z jednego procesu lub wątku na inny: przełączenie uwagi CPU.
10. cpu-migrations - ile razy system przeniósł proces między różnymi rdzeniami CPU, co może spowalniać działanie.
11. page-faults    - liczba sytuacji, kiedy program chciał użyć fragmentu pamięci, który nie był jeszcze załadowany do RAM i system musiał go dopiero wczytać.

Dodatkowo:
- time elapsed - całkowity rzeczywisty czas trwania programu: z perspektywy zegarka na ścianie.
- user/sys     - czas spędzony na wykonywaniu kodu użytkownika [user] oraz kodu systemowego [sys].
======================
[100%] Built target perf_stats_tests
